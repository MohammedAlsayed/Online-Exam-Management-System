
/**
 * 
 * Manages the users in the database.
 * 
 * @author Mossad Helali 13-12-2015.
 */
package DB.Tables;
import DB.beans.User;
import java.sql.*;
import DB.DBUtil;

public class UserManager {

	
	/**
	 * Creates a user by their email, password, first and last name.
	 * The user Id is generated by a sequence in the database.
	 * @param email: email should be unique, an email can be registered only for one user.  
	 * @param password
	 * @param firstName
	 * @param lastName
	 * @return: true if created, false otherwise
	 */
	public static boolean createUser(String email, String password, String firstName, String lastName) throws SQLException{
		
		//sql query
		//String sql = "INSERT INTO USERS (UNO, EMAIL, PASSWORD, FNAME, LNAME)"
		//		   + " VALUES (USERSEQUENCE.NEXTVAL, " + email + ", " + password + ", " + firstName + ", " + lastName + ");" ;
		
		String sql = "INSERT INTO USERS VALUES (USERSEQUENCE.NEXTVAL, ?, ?, ?, ?)";

		// creating connection: this form of try is used to close resources after execution
		try(Connection connection = DBUtil.getConnection();
			PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);){
			
			statement.setString(1, email);
			statement.setString(2, password);
			statement.setString(3,  firstName);
			statement.setString(4,  lastName);

			
			int affected = statement.executeUpdate();
			
			if(affected == 1){
				return true;
			}
			else{
				return false;
			}	
		}	
	}
	
	
	
	/**
	 * Used to login the user (check login credentials)
	 * @param email: user email
	 * @param password: user password
	 * @return the user if the email password combination is correct, null otherwise
	 * @throws SQLException
	 */
	public static User getLoginedUser(String email, String password) throws SQLException{
		
		String sql = "SELECT * FROM USERS WHERE EMAIL= ? AND PASSWORD = ?";
		
		try(Connection connection = DBUtil.getConnection();
			PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)){
			
			
			statement.setString(1, email);
			statement.setString(2, password);
			
			ResultSet rs = statement.executeQuery();
			
			if(rs.next()){
				
				int id = rs.getInt(1);	
				// we already have the email and password
				String firstName = rs.getString(4);
				String lastName = rs.getString(5);
				
				User user = new User(id, email, password, firstName, lastName);
				
				return user;
				
				
			}
			else{
				return null;
			}	
		}
	}
	
	

	/**
	 * Gets a specific user by their email. 
	 * @param email the user email (UNIQUE)
	 * @return the user with the passed email or null if the user does not exist.
	 * @throws SQLException
	 */
	public static User getUserByEmail(String email) throws SQLException{
		
		// sql query
		String sql = "SELECT * FROM USERS WHERE EMAIL = ?" ;
		
		// creating connection: this form of try is used to close resources after execution
		try (Connection connection = DBUtil.getConnection();
			 PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);){
			
			statement.setString(1, email);
			
			ResultSet rs = statement.executeQuery();
			
			if(rs.next()){
				
				int id = rs.getInt(1);	
				String password = rs.getString(3);		// we already have the email
				String firstName = rs.getString(4);
				String lastName = rs.getString(5);
				
				User user = new User(id, email, password, firstName, lastName);
				
				return user;
				
			}
			else return null;
		}	
	}

	
	
	/**
	 * Gets a specific user by their user number (ID)
	 * @param id user number
	 * @return the user with the passed id, or null if the user does not exist.
	 * @throws SQLException
	 */
	public static User getUserById(int id) throws SQLException{
		
		// sql query
		String sql = "SELECT * FROM USERS WHERE UNO = ?" ;
		
		
		// creating connection: this form of try is used to close resources after execution
		try (Connection connection = DBUtil.getConnection();
			 PreparedStatement statement = connection.prepareStatement(sql);){
			
			statement.setInt(1,  id);
					
			ResultSet rs = statement.executeQuery();
			
			if(rs.next()){
				
				// we already have the id
				String email = rs.getString(2);
				String password = rs.getString(3);		
				String firstName = rs.getString(4);
				String lastName = rs.getString(5);
				
				User user = new User(id, email, password, firstName, lastName);
				
				return user;
				
			}
			else {
				return null;
			}
		}
	}
	
	
	
	
	/**
	 * Updates the user details given their email.
	 * If you want to edit one attribute only, enter the old values
	 * 
	 * @param email: the old email if email will be changed
	 * @param newEmail: the new email
	 * @param newPassword
	 * @param newFirstName
	 * @param newLastName
	 * @return: true if updated, false otherwise
	 * @throws SQLException
	 */
	public static boolean editUserByEmail(String email, String newEmail, String newPassword, String newFirstName, String newLastName) throws SQLException{
		
				
		// TODO make sure this actually works!
		//sql statement
		String sql = "UPDATE USERS"
				   + " SET EMAIL= ?, PASSWORD= ?, FNAME= ?, LNAME= ?"
				   + " WHERE EMAIL = ?";
		
		try(Connection connection = DBUtil.getConnection();
			PreparedStatement statement = connection.prepareStatement(sql);){
			
			statement.setString(1, newEmail);
			statement.setString(2,  newPassword);
			statement.setString(3,  newFirstName);
			statement.setString(4,  newLastName);
			statement.setString(5,  email);
			
			
			int affected = statement.executeUpdate();
			
			if(affected == 1){
				return true;
			}
			else{
				return false;
			}
		}	
	}
	
	
	
	/**
	 * Updates the user details given their id.
	 * If you want to edit one attribute only, enter the old values
	 * 
	 * @param id: the UNO of the user
	 * @param newEmail
	 * @param newPassword
	 * @param newFirstName
	 * @param newLastName
	 * @return: true if updated, false otherwise
	 * @throws SQLException
	 */
	public static boolean editUserById(int id, String newEmail, String newPassword, String newFirstName, String newLastName) throws SQLException{
		
				
		// TODO make sure this actually works!
		//sql statement
		String sql = "UPDATE USERS"
				   + " SET EMAIL= ?, PASSWORD= ?, FNAME= ?, LNAME= ?"
				   + " WHERE UNO = ?";
		
		try(Connection connection = DBUtil.getConnection();
			PreparedStatement statement = connection.prepareStatement(sql);){
			
			statement.setString(1, newEmail);
			statement.setString(2,  newPassword);
			statement.setString(3,  newFirstName);
			statement.setString(4,  newLastName);
			statement.setInt(5,  id);
			
			
			int affected = statement.executeUpdate();
			
			if(affected == 1){
				return true;
			}
			else{
				return false;
			}
		}	
	}
		
	
}
